"""
ูุณุงุนุฏ ูุฅุฑุณุงู ุงููููุงุช ูุน ุงุณู ูุฎุตุต ูู Telethon
ูุญู ูุดููุฉ ุฅุฑุณุงู ุงูุจูุงูุงุช ุงูุฎุงู (bytes) ูุน ุงุณู ููู ุตุญูุญ
"""
import io
import logging
from typing import Union, Optional

logger = logging.getLogger(__name__)

class TelethonFileSender:
    """ูุณุงุนุฏ ูุฅุฑุณุงู ุงููููุงุช ูุน ุฃุณูุงุก ุตุญูุญุฉ"""
    
    @staticmethod
    async def send_file_with_name(client, entity, file_data: Union[bytes, any], filename: str, **kwargs):
        """
        ุฅุฑุณุงู ููู ูุน ุงุณู ูุฎุตุต
        ูุญู ูุดููุฉ Telethon ูุน ุงูุจูุงูุงุช ุงูุฎุงู ูุงูุฃุณูุงุก ุงููุฎุตุตุฉ
        """
        try:
            # ุฅุฐุง ูุงูุช ุงูุจูุงูุงุช ูู bytesุ ุงุณุชุฎุฏู BytesIO ูุน name attribute
            if isinstance(file_data, bytes):
                logger.info(f"๐ค ุฅุฑุณุงู ููู bytes ูุน ุงุณู: {filename}")
                logger.info(f"๐ ุญุฌู ุงูุจูุงูุงุช: {len(file_data)} bytes")
                
                # ุฅูุดุงุก BytesIO stream ูุน ุงุณู ุงูููู
                file_stream = io.BytesIO(file_data)
                file_stream.name = filename  # ุชุนููู ุงุณู ุงูููู
                
                logger.info(f"๐ง ุชู ุฅูุดุงุก BytesIO stream ูุน ุงูุงุณู: {file_stream.name}")
                
                # ุฅุฑุณุงู ุงูููู ูุน stream
                result = await client.send_file(entity, file_stream, **kwargs)
                logger.info(f"โ ุชู ุฅุฑุณุงู ุงูููู {filename} ุจูุฌุงุญ ุจุงุณุชุฎุฏุงู BytesIO")
                return result
            else:
                # ููุฃููุงุน ุงูุฃุฎุฑูุ ุงุณุชุฎุฏู ุงูุทุฑููุฉ ุงูุนุงุฏูุฉ
                logger.info(f"๐ค ุฅุฑุณุงู ููู ุนุงุฏู ูุน ุงุณู: {filename}")
                return await client.send_file(entity, file_data, file_name=filename, **kwargs)
                
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุฅุฑุณุงู ุงูููู {filename}: {e}")
            import traceback
            logger.error(f"โ ุชูุงุตูู ุงูุฎุทุฃ: {traceback.format_exc()}")
            # ูู ุญุงูุฉ ุงูุฎุทุฃุ ุฌุฑุจ upload_file ุฃููุงู
            try:
                if isinstance(file_data, bytes):
                    logger.info("๐ ูุญุงููุฉ ุจุฏููุฉ ุจุงุณุชุฎุฏุงู upload_file")
                    file_handle = await client.upload_file(
                        file=io.BytesIO(file_data),
                        file_name=filename
                    )
                    return await client.send_file(entity, file_handle, **kwargs)
                else:
                    return await client.send_file(entity, file_data, **kwargs)
            except Exception as e2:
                logger.error(f"โ ูุดู ุญุชู ูู ุงูุฅุฑุณุงู ุงูุจุฏูู: {e2}")
                raise e