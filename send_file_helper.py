"""
ูุณุงุนุฏ ูุฅุฑุณุงู ุงููููุงุช ูุน ุงุณู ูุฎุตุต ูู Telethon
ูุญู ูุดููุฉ ุฅุฑุณุงู ุงูุจูุงูุงุช ุงูุฎุงู (bytes) ูุน ุงุณู ููู ุตุญูุญ
"""
import io
import logging
from typing import Union, Optional

logger = logging.getLogger(__name__)

class TelethonFileSender:
    """ูุณุงุนุฏ ูุฅุฑุณุงู ุงููููุงุช ูุน ุฃุณูุงุก ุตุญูุญุฉ"""
    
    @staticmethod
    async def send_file_with_name(client, entity, file_data: Union[bytes, any], filename: str, **kwargs):
        """
        ุฅุฑุณุงู ููู ูุน ุงุณู ูุฎุตุต
        ูุญู ูุดููุฉ Telethon ูุน ุงูุจูุงูุงุช ุงูุฎุงู ูุงูุฃุณูุงุก ุงููุฎุตุตุฉ
        """
        try:
            # ุฅุฐุง ูุงูุช ุงูุจูุงูุงุช ูู bytesุ ูุญุชุงุฌ ูุงุณุชุฎุฏุงู upload_file ุฃููุงู
            if isinstance(file_data, bytes):
                logger.info(f"๐ค ุฅุฑุณุงู ููู bytes ูุน ุงุณู: {filename}")
                
                # ุฑูุน ุงูููู ุฃููุงู ูุน ุงูุงุณู ุงููุฎุตุต
                file_handle = await client.upload_file(
                    file=io.BytesIO(file_data),
                    file_name=filename
                )
                
                # ุฅุฑุณุงู ุงูููู ุงููุฑููุน
                return await client.send_file(entity, file_handle, **kwargs)
            else:
                # ููุฃููุงุน ุงูุฃุฎุฑูุ ุงุณุชุฎุฏู ุงูุทุฑููุฉ ุงูุนุงุฏูุฉ
                logger.info(f"๐ค ุฅุฑุณุงู ููู ุนุงุฏู ูุน ุงุณู: {filename}")
                return await client.send_file(entity, file_data, file_name=filename, **kwargs)
                
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุฅุฑุณุงู ุงูููู {filename}: {e}")
            # ูู ุญุงูุฉ ุงูุฎุทุฃุ ุญุงูู ุงูุฅุฑุณุงู ุจุฏูู ุงุณู ูุฎุตุต
            return await client.send_file(entity, file_data, **kwargs)